
# Predict on the test set
predictions = best_model.predict(X_test)
predicted_categories = np.argmax(predictions, axis=1)
real_categories = y_test

# Generate signals based on predicted categories
signals = predicted_categories

actions = predicted_categories
percent_changes = np.array(df['usd_eur_exchange'].iloc[-len(y_test):])

def backtest(actions, percent_changes):
    cash = 100  # Initial cash
    position = 0  # Current position: 0 for flat, -1 for short, 1 for long
    portfolio_value = []  # Portfolio value over time

    for action, percent_change in zip(actions, percent_changes):
        if action == 0:  # Sell
            position = -100  # Set position to short
            cash += position * percent_change  # Sell shares
        elif action == 1:  # Flat
            position = 0  # Set position to flat
            cash += 0  # No action
        elif action == 2:  # Buy
            position = 100  # Set position to long
            cash += position * percent_change  # Buy shares

        portfolio_value.append(cash)  # Calculate portfolio value

    return portfolio_value

# Example usage
portfolio_value = backtest(actions, percent_changes)
print("Portfolio Value Over Time:")
print(portfolio_value)
print('Profit:')
print(portfolio_value[-1])
print('Standard deviation')
print(np.std(portfolio_value))

# Plot training & validation loss values
plt.plot(portfolio_value)
plt.title('Value')
plt.ylabel('Value')
plt.xlabel('Time')
plt.show()
